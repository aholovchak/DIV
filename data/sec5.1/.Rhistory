if(unif == TRUE){
Hmean <- runif(num_rep, -1, 1)
}
else {
Hmean <- rnorm(num_rep)
}
# Compute the mean for the current Xtest value
Ymean <- f(X = rep(Xtest_grid[i], num_rep), H = Hmean, eps_Y = eps_Ymean)
Ymean_unconfounded <- f(X = rep(Xtest_grid[i], num_rep), H = 0, eps_Y = eps_Ymean)
mean_value <- mean(Ymean, trim = 0.05)
mean_value_unconfounded <- mean(Ymean_unconfounded, trim = 0.05)
# Store the mean value in the mean_vector
mean_grid[i] <- mean_value
mean_grid_unconfounded[i] <- mean_value_unconfounded
}
g_name <- deparse(substitute(g))
f_name <- deparse(substitute(f))
train_df_name <- paste("train_Z", instrument, "_", g_name, "_", f_name, ".csv", sep = "")
write.csv(data.frame(H, Z, X, Y, Y_unconfounded), train_df_name, row.names = FALSE)
test_df_name <- paste("test_Z", instrument, "_", g_name, "_", f_name, ".csv", sep = "")
write.csv(data.frame(Xint, Yint, Yint2, mean_int, Xtest_grid, mean_grid, mean_grid_unconfounded), test_df_name, row.names = FALSE)
return(data = data.frame(Xint, Yint, Yint2, mean_int, Xtest_grid, mean_grid, mean_grid_unconfounded))
}
# Sec 5.1
# Settings 1-2
g_lin <- function(Z, H, eps_X){
return(Z + H + eps_X)
}
f_lin <- function(X, H, eps_Y){
return(X - 3 * H + eps_Y)
}
# Settings 3-4
g_lin <- function(Z, H, eps_X){
return(Z + H + eps_X)
}
f_log_case <- function(X, H, eps_Y){
Y <- ifelse(X <= 1, (2 * X + 3 * H + eps_Y + 5.5) / 5, log((2 * X + H)^2 + eps_Y^2))
return(Y)
}
# Settings 5-6
g_lin <- function(Z, H, eps_X){
return(Z + H + eps_X)
}
f_sin_lin <- function(X, H, eps_Y){
return(3 * sin(1.5 * X) + 2 * X - 3 * H + eps_Y)
}
# Sec 3.3
g_softplus <- function(Z, H, eps_X){
return(log(1 + exp(Z + H + eps_X)))
}
f_softplus <- function(X, H, eps_Y){
return(0.5 * log(1 + exp(2 * X + 2 * H + 4 * eps_Y)))
}
# Appendix F.1
g_lin2 <- function(Z, H, eps_X){
return(Z + 1 * H + 0.5 * eps_X)
}
f_lin2 <- function(X, H, eps_Y){
return(X - 3 * H + 0.5 * eps_Y)
}
set.seed(1994)
setwd("~/Documents/ethz/DIV/github/data/sec5.1")
result <- simulation(g = g_lin, f = f_log_case, instrument = "cont",
unif = FALSE, nsample = 10000)
plot(result$Xtest_grid, result$mean_grid)
library(ggplot2)
simulation <- function(g, f, nsample, instrument = c("cont", "bin"), unif = FALSE){
# Observational data
n_test <- 5000
n_train <- nsample
if(unif == TRUE){
eps_X <- runif(n_train, -3, 3)
H <- runif(n_train, -1, 1)
} else {
eps_X <- rnorm(n_train)
H <- rnorm(n_train)
}
eps_Y <- rnorm(n_train)
if(instrument == "bin"){
Z <- rbinom(1, n = n_train, prob = 0.5)
Zint <- rbinom(1, n = n_test, prob = 0.5)
} else if(instrument == "cont"){
Z <- runif(n_train, 0, 3)
Zint <- runif(n_test, 0, 3)
}
X <- g(Z = Z, H = H, eps_X = eps_X)
Y <- f(X = X, H = H, eps_Y = eps_Y)
Y_unconfounded <- f(X = X, H = 0, eps_Y = eps_Y)
# Interventional data
if(unif == TRUE){
eps_Xint <- runif(n_test, -3, 3)
H1int <- runif(n_test, -1, 1)
H2int <- runif(n_test, -1, 1)
H2pint <- runif(n_test, -1, 1)
} else {
eps_Xint <- rnorm(n_test)
H1int <- rnorm(n_test)
H2int <- rnorm(n_test)
H2pint <- rnorm(n_test)
}
eps1_Yint <- rnorm(n_test)
eps2_Yint <- rnorm(n_test)
Xint <- g(Z = Zint, H = H1int, eps_X = eps_Xint)
Yint <- f(X = Xint, H = H2int, eps_Y = eps1_Yint)
Yint2 <- f(X = Xint, H = H2pint, eps_Y = eps2_Yint)
# Assuming you have a data frame with your data
# Create a data frame combining both X and Xint along with their corresponding Y and Yint
data <- data.frame(
X = c(X, Xint),
Y = c(Y, Yint),
Group = factor(rep(c("Observational Data", "Interventional Data"), times = c(n_train, n_test)))
)
# Create the ggplot
p <- ggplot(data, aes(x = X, y = Y, color = Group)) +
geom_point(alpha = 0.3) +
labs(x = "X", y = "Y") +
theme_minimal() +
guides(color = guide_legend(title = ""))
print(p)
# True interventional mean (interventional data, for MSE)
# Initialize an empty vector to store the mean values
mean_int <- numeric(length(Xint))
num_rep <- 5000
# Loop over each element in Xtest
for (i in 1:length(Xint)) {
# Sample new H and eps_Y vectors for each Xtest value
eps_Ymean <- rnorm(num_rep)
if(unif == TRUE){
Hmean <- runif(num_rep, -1, 1)
}
else {
Hmean <- rnorm(num_rep)
}
# Compute the mean for the current Xtest value
Ymean <- f(X = rep(Xint[i], num_rep), H = Hmean, eps_Y = eps_Ymean)
mean_value <- mean(Ymean, trim = 0.05)
# Store the mean value in the mean_vector
mean_int[i] <- mean_value
}
# Grid X (for plots)
Xtest_grid <- seq(min(X), max(X), length.out = n_test)
# True interventional mean (grid data, for plot)
# Initialize an empty vector to store the mean values
mean_grid <- numeric(length(Xtest_grid))
mean_grid_unconfounded <- numeric(length(Xtest_grid))
# Loop over each element in Xtest
for (i in 1:length(Xtest_grid)) {
# Sample new H and eps_Y vectors for each Xtest value
eps_Ymean <- rnorm(num_rep)
if(unif == TRUE){
Hmean <- runif(num_rep, -1, 1)
}
else {
Hmean <- rnorm(num_rep)
}
# Compute the mean for the current Xtest value
Ymean <- f(X = rep(Xtest_grid[i], num_rep), H = Hmean, eps_Y = eps_Ymean)
Ymean_unconfounded <- f(X = rep(Xtest_grid[i], num_rep), H = 0, eps_Y = eps_Ymean)
mean_value <- mean(Ymean, trim = 0.05)
mean_value_unconfounded <- mean(Ymean_unconfounded, trim = 0.05)
# Store the mean value in the mean_vector
mean_grid[i] <- mean_value
mean_grid_unconfounded[i] <- mean_value_unconfounded
}
g_name <- deparse(substitute(g))
f_name <- deparse(substitute(f))
train_df_name <- paste("train_Z", instrument, "_", g_name, "_", f_name, ".csv", sep = "")
write.csv(data.frame(H, Z, X, Y, Y_unconfounded), train_df_name, row.names = FALSE)
test_df_name <- paste("test_Z", instrument, "_", g_name, "_", f_name, ".csv", sep = "")
write.csv(data.frame(Xint, Yint, Yint2, mean_int, Xtest_grid, mean_grid, mean_grid_unconfounded), test_df_name, row.names = FALSE)
return(data = data.frame(Xint, Yint, Yint2, mean_int, Xtest_grid, mean_grid, mean_grid_unconfounded))
}
# Sec 5.1
# Settings 1-2
g_lin <- function(Z, H, eps_X){
return(Z + H + eps_X)
}
f_lin <- function(X, H, eps_Y){
return(X - 3 * H + eps_Y)
}
# Settings 3-4
g_lin <- function(Z, H, eps_X){
return(Z + H + eps_X)
}
f_log_case <- function(X, H, eps_Y){
Y <- ifelse(X <= 1, (2 * X + 3 * H + eps_Y + 5.5) / 5, log((2 * X + H)^2 + eps_Y^2))
return(Y)
}
# Settings 5-6
g_lin <- function(Z, H, eps_X){
return(Z + H + eps_X)
}
f_sin_lin <- function(X, H, eps_Y){
return(3 * sin(1.5 * X) + 2 * X - 3 * H + eps_Y)
}
# Sec 3.3
g_softplus <- function(Z, H, eps_X){
return(log(1 + exp(Z + H + eps_X)))
}
f_softplus <- function(X, H, eps_Y){
return(0.5 * log(1 + exp(2 * X + 2 * H + 4 * eps_Y)))
}
# Appendix F.1
g_lin2 <- function(Z, H, eps_X){
return(Z + 1 * H + 0.5 * eps_X)
}
f_lin2 <- function(X, H, eps_Y){
return(X - 3 * H + 0.5 * eps_Y)
}
set.seed(1994)
setwd("~/Documents/ethz/DIV/github/data/sec5.1")
result <- simulation(g = g_lin, f = f_log_case, instrument = "bin",
unif = FALSE, nsample = 10000)
plot(result$Xtest_grid, result$mean_grid)
library(ggplot2)
simulation <- function(g, f, nsample, instrument = c("cont", "bin"), unif = FALSE){
# Observational data
n_test <- 5000
n_train <- nsample
if(unif == TRUE){
eps_X <- runif(n_train, -3, 3)
H <- runif(n_train, -1, 1)
} else {
eps_X <- rnorm(n_train)
H <- rnorm(n_train)
}
eps_Y <- rnorm(n_train)
if(instrument == "bin"){
Z <- rbinom(1, n = n_train, prob = 0.5)
Zint <- rbinom(1, n = n_test, prob = 0.5)
} else if(instrument == "cont"){
Z <- runif(n_train, 0, 3)
Zint <- runif(n_test, 0, 3)
}
X <- g(Z = Z, H = H, eps_X = eps_X)
Y <- f(X = X, H = H, eps_Y = eps_Y)
Y_unconfounded <- f(X = X, H = 0, eps_Y = eps_Y)
# Interventional data
if(unif == TRUE){
eps_Xint <- runif(n_test, -3, 3)
H1int <- runif(n_test, -1, 1)
H2int <- runif(n_test, -1, 1)
H2pint <- runif(n_test, -1, 1)
} else {
eps_Xint <- rnorm(n_test)
H1int <- rnorm(n_test)
H2int <- rnorm(n_test)
H2pint <- rnorm(n_test)
}
eps1_Yint <- rnorm(n_test)
eps2_Yint <- rnorm(n_test)
Xint <- g(Z = Zint, H = H1int, eps_X = eps_Xint)
Yint <- f(X = Xint, H = H2int, eps_Y = eps1_Yint)
Yint2 <- f(X = Xint, H = H2pint, eps_Y = eps2_Yint)
# Assuming you have a data frame with your data
# Create a data frame combining both X and Xint along with their corresponding Y and Yint
data <- data.frame(
X = c(X, Xint),
Y = c(Y, Yint),
Group = factor(rep(c("Observational Data", "Interventional Data"), times = c(n_train, n_test)))
)
# Create the ggplot
p <- ggplot(data, aes(x = X, y = Y, color = Group)) +
geom_point(alpha = 0.3) +
labs(x = "X", y = "Y") +
theme_minimal() +
guides(color = guide_legend(title = ""))
print(p)
# True interventional mean (interventional data, for MSE)
# Initialize an empty vector to store the mean values
mean_int <- numeric(length(Xint))
num_rep <- 5000
# Loop over each element in Xtest
for (i in 1:length(Xint)) {
# Sample new H and eps_Y vectors for each Xtest value
eps_Ymean <- rnorm(num_rep)
if(unif == TRUE){
Hmean <- runif(num_rep, -1, 1)
}
else {
Hmean <- rnorm(num_rep)
}
# Compute the mean for the current Xtest value
Ymean <- f(X = rep(Xint[i], num_rep), H = Hmean, eps_Y = eps_Ymean)
mean_value <- mean(Ymean, trim = 0.05)
# Store the mean value in the mean_vector
mean_int[i] <- mean_value
}
# Grid X (for plots)
Xtest_grid <- seq(min(X), max(X), length.out = n_test)
# True interventional mean (grid data, for plot)
# Initialize an empty vector to store the mean values
mean_grid <- numeric(length(Xtest_grid))
mean_grid_unconfounded <- numeric(length(Xtest_grid))
# Loop over each element in Xtest
for (i in 1:length(Xtest_grid)) {
# Sample new H and eps_Y vectors for each Xtest value
eps_Ymean <- rnorm(num_rep)
if(unif == TRUE){
Hmean <- runif(num_rep, -1, 1)
}
else {
Hmean <- rnorm(num_rep)
}
# Compute the mean for the current Xtest value
Ymean <- f(X = rep(Xtest_grid[i], num_rep), H = Hmean, eps_Y = eps_Ymean)
Ymean_unconfounded <- f(X = rep(Xtest_grid[i], num_rep), H = 0, eps_Y = eps_Ymean)
mean_value <- mean(Ymean, trim = 0.05)
mean_value_unconfounded <- mean(Ymean_unconfounded, trim = 0.05)
# Store the mean value in the mean_vector
mean_grid[i] <- mean_value
mean_grid_unconfounded[i] <- mean_value_unconfounded
}
g_name <- deparse(substitute(g))
f_name <- deparse(substitute(f))
train_df_name <- paste("train_Z", instrument, "_", g_name, "_", f_name, ".csv", sep = "")
write.csv(data.frame(H, Z, X, Y, Y_unconfounded), train_df_name, row.names = FALSE)
test_df_name <- paste("test_Z", instrument, "_", g_name, "_", f_name, ".csv", sep = "")
write.csv(data.frame(Xint, Yint, Yint2, mean_int, Xtest_grid, mean_grid, mean_grid_unconfounded), test_df_name, row.names = FALSE)
return(data = data.frame(Xint, Yint, Yint2, mean_int, Xtest_grid, mean_grid, mean_grid_unconfounded))
}
# Sec 5.1
# Settings 1-2
g_lin <- function(Z, H, eps_X){
return(Z + H + eps_X)
}
f_lin <- function(X, H, eps_Y){
return(X - 3 * H + eps_Y)
}
# Settings 3-4
g_lin <- function(Z, H, eps_X){
return(Z + H + eps_X)
}
f_log_case <- function(X, H, eps_Y){
Y <- ifelse(X <= 1, (2 * X + 3 * H + eps_Y + 5.5) / 5, log((2 * X + H)^2 + eps_Y^2))
return(Y)
}
# Settings 5-6
g_lin <- function(Z, H, eps_X){
return(Z + H + eps_X)
}
f_sin_lin <- function(X, H, eps_Y){
return(3 * sin(1.5 * X) + 2 * X - 3 * H + eps_Y)
}
# Sec 3.3
g_softplus <- function(Z, H, eps_X){
return(log(1 + exp(Z + H + eps_X)))
}
f_softplus <- function(X, H, eps_Y){
return(0.5 * log(1 + exp(2 * X + 2 * H + 4 * eps_Y)))
}
# Appendix F.1
g_lin2 <- function(Z, H, eps_X){
return(Z + 1 * H + 0.5 * eps_X)
}
f_lin2 <- function(X, H, eps_Y){
return(X - 3 * H + 0.5 * eps_Y)
}
set.seed(1994)
setwd("~/Documents/ethz/DIV/github/data/sec5.1")
result <- simulation(g = g_lin, f = f_sin_lin, instrument = "bin",
unif = FALSE, nsample = 10000)
plot(result$Xtest_grid, result$mean_grid)
library(ggplot2)
simulation <- function(g, f, nsample, instrument = c("cont", "bin"), unif = FALSE){
# Observational data
n_test <- 5000
n_train <- nsample
if(unif == TRUE){
eps_X <- runif(n_train, -3, 3)
H <- runif(n_train, -1, 1)
} else {
eps_X <- rnorm(n_train)
H <- rnorm(n_train)
}
eps_Y <- rnorm(n_train)
if(instrument == "bin"){
Z <- rbinom(1, n = n_train, prob = 0.5)
Zint <- rbinom(1, n = n_test, prob = 0.5)
} else if(instrument == "cont"){
Z <- runif(n_train, 0, 3)
Zint <- runif(n_test, 0, 3)
}
X <- g(Z = Z, H = H, eps_X = eps_X)
Y <- f(X = X, H = H, eps_Y = eps_Y)
Y_unconfounded <- f(X = X, H = 0, eps_Y = eps_Y)
# Interventional data
if(unif == TRUE){
eps_Xint <- runif(n_test, -3, 3)
H1int <- runif(n_test, -1, 1)
H2int <- runif(n_test, -1, 1)
H2pint <- runif(n_test, -1, 1)
} else {
eps_Xint <- rnorm(n_test)
H1int <- rnorm(n_test)
H2int <- rnorm(n_test)
H2pint <- rnorm(n_test)
}
eps1_Yint <- rnorm(n_test)
eps2_Yint <- rnorm(n_test)
Xint <- g(Z = Zint, H = H1int, eps_X = eps_Xint)
Yint <- f(X = Xint, H = H2int, eps_Y = eps1_Yint)
Yint2 <- f(X = Xint, H = H2pint, eps_Y = eps2_Yint)
# Assuming you have a data frame with your data
# Create a data frame combining both X and Xint along with their corresponding Y and Yint
data <- data.frame(
X = c(X, Xint),
Y = c(Y, Yint),
Group = factor(rep(c("Observational Data", "Interventional Data"), times = c(n_train, n_test)))
)
# Create the ggplot
p <- ggplot(data, aes(x = X, y = Y, color = Group)) +
geom_point(alpha = 0.3) +
labs(x = "X", y = "Y") +
theme_minimal() +
guides(color = guide_legend(title = ""))
print(p)
# True interventional mean (interventional data, for MSE)
# Initialize an empty vector to store the mean values
mean_int <- numeric(length(Xint))
num_rep <- 5000
# Loop over each element in Xtest
for (i in 1:length(Xint)) {
# Sample new H and eps_Y vectors for each Xtest value
eps_Ymean <- rnorm(num_rep)
if(unif == TRUE){
Hmean <- runif(num_rep, -1, 1)
}
else {
Hmean <- rnorm(num_rep)
}
# Compute the mean for the current Xtest value
Ymean <- f(X = rep(Xint[i], num_rep), H = Hmean, eps_Y = eps_Ymean)
mean_value <- mean(Ymean, trim = 0.05)
# Store the mean value in the mean_vector
mean_int[i] <- mean_value
}
# Grid X (for plots)
Xtest_grid <- seq(min(X), max(X), length.out = n_test)
# True interventional mean (grid data, for plot)
# Initialize an empty vector to store the mean values
mean_grid <- numeric(length(Xtest_grid))
mean_grid_unconfounded <- numeric(length(Xtest_grid))
# Loop over each element in Xtest
for (i in 1:length(Xtest_grid)) {
# Sample new H and eps_Y vectors for each Xtest value
eps_Ymean <- rnorm(num_rep)
if(unif == TRUE){
Hmean <- runif(num_rep, -1, 1)
}
else {
Hmean <- rnorm(num_rep)
}
# Compute the mean for the current Xtest value
Ymean <- f(X = rep(Xtest_grid[i], num_rep), H = Hmean, eps_Y = eps_Ymean)
Ymean_unconfounded <- f(X = rep(Xtest_grid[i], num_rep), H = 0, eps_Y = eps_Ymean)
mean_value <- mean(Ymean, trim = 0.05)
mean_value_unconfounded <- mean(Ymean_unconfounded, trim = 0.05)
# Store the mean value in the mean_vector
mean_grid[i] <- mean_value
mean_grid_unconfounded[i] <- mean_value_unconfounded
}
g_name <- deparse(substitute(g))
f_name <- deparse(substitute(f))
train_df_name <- paste("train_Z", instrument, "_", g_name, "_", f_name, ".csv", sep = "")
write.csv(data.frame(H, Z, X, Y, Y_unconfounded), train_df_name, row.names = FALSE)
test_df_name <- paste("test_Z", instrument, "_", g_name, "_", f_name, ".csv", sep = "")
write.csv(data.frame(Xint, Yint, Yint2, mean_int, Xtest_grid, mean_grid, mean_grid_unconfounded), test_df_name, row.names = FALSE)
return(data = data.frame(Xint, Yint, Yint2, mean_int, Xtest_grid, mean_grid, mean_grid_unconfounded))
}
# Sec 5.1
# Settings 1-2
g_lin <- function(Z, H, eps_X){
return(Z + H + eps_X)
}
f_lin <- function(X, H, eps_Y){
return(X - 3 * H + eps_Y)
}
# Settings 3-4
g_lin <- function(Z, H, eps_X){
return(Z + H + eps_X)
}
f_log_case <- function(X, H, eps_Y){
Y <- ifelse(X <= 1, (2 * X + 3 * H + eps_Y + 5.5) / 5, log((2 * X + H)^2 + eps_Y^2))
return(Y)
}
# Settings 5-6
g_lin <- function(Z, H, eps_X){
return(Z + H + eps_X)
}
f_sin_lin <- function(X, H, eps_Y){
return(3 * sin(1.5 * X) + 2 * X - 3 * H + eps_Y)
}
# Sec 3.3
g_softplus <- function(Z, H, eps_X){
return(log(1 + exp(Z + H + eps_X)))
}
f_softplus <- function(X, H, eps_Y){
return(0.5 * log(1 + exp(2 * X + 2 * H + 4 * eps_Y)))
}
# Appendix F.1
g_lin2 <- function(Z, H, eps_X){
return(Z + 1 * H + 0.5 * eps_X)
}
f_lin2 <- function(X, H, eps_Y){
return(X - 3 * H + 0.5 * eps_Y)
}
set.seed(1994)
setwd("~/Documents/ethz/DIV/github/data/sec5.1")
result <- simulation(g = g_lin, f = f_sin_lin, instrument = "cont",
unif = FALSE, nsample = 10000)
plot(result$Xtest_grid, result$mean_grid)
